Copyright 2010-2022 The MathWorks, Inc.

MATLAB and Simulink are registered trademarks of The MathWorks, Inc.
See www.mathworks.com/trademarks for a list of additional trademarks.
Other product or brand names may be trademarks or registered trademarks of their respective holders.

This folder contains a number of files to allow Parallel Computing Toolbox
to be used with Grid Engine(R) via the generic cluster interface.

The files in this folder assume that the client and cluster share a file system
and that the client is not able to submit directly to the cluster using the
qsub command.

Note that all the files in this directory will work only for clusters that are
running on UNIX.

1) Instructions for Use
=======================
Running Communicating Jobs
---------------------
For running communicating jobs, a Grid Engine parallel environment is required.
Two example template files are provided. The "matlabPe.template" file is
compatible with the Hydra process manager and should be used in most cases for
R2019a onwards. The "matlabSmpdPe.template" is compatible with the SMPD process
manager and can be used if problems arise using the Hydra process manager or for
R2018b and earlier.

Both templates must be customized to match the number of slots available. The
"matlabSmpdPe.template" file must be customized to match where the
"startmatlabpe.sh" and "stopmatlabpe.sh" scripts are installed on your cluster.

The following stages are needed to create the parallel environment, and then
make the parallel environment runnable on a particular queue. You should perform
these steps on the headnode of your cluster. If you wish to support both Hydra
and SMPD process managers, carry out these stages for both the "matlabPe.template"
and "matlabSmpdPe.template" files.

1. Modify the contents of the template to use your desired number of slots. If you are
using the "matlabSmpdPe.template" file then also modify the contents to use the
correct location of the startmatlabpe.sh and stopmatlabpe.sh files. You can also
change other values or add additional values to the templates to suit your cluster.
For more information, refer to the sge_pe documentation provided with your cluster.

2. Add the "matlab" parallel environment, using a shell command like:

       $ qconf -Ap matlabPe.template

3. Make the "matlab" PE runnable on all queues:

       $ qconf -mq all.q

This will bring up a text editor for you to make changes: search for the line
"pe_list", and add "matlab"

4. Ensure you can submit a trivial job to the PE:

       $ echo "hostname" | qsub -pe matlab 1

Check that the job runs correctly using "qstat", and check that the output file
contains the name of the host that ran the job.  The default filename for the
output file is "~/STDIN.o###", where "###" is the Grid Engine job number.

Read the documentation for using the generic cluster interface with
the Parallel Computing Toolbox and familiarize yourself with the different
properties that can be set for a generic cluster.

In the MATLAB Client
--------------------
1. Create a generic cluster object for your cluster. Set the PluginScriptsLocation
to this folder. For independent jobs, independentSubmitFcn is used as your
submit function. For communicating jobs, communicatingSubmitFcn is used as
your submit function.
Both of these functions require one character vector value field on the cluster's AdditionalProperties property
    a. ClusterHost - The name of the cluster host that will call the qsub command.

Example:
% Use a folder that both the client and cluster can access
% as the JobStorageLocation.  If your cluster and client use
% different operating systems, you should specify JobStorageLocation
% to be a structure.  Refer to the documentation on
% generic cluster for more information.
cluster = parallel.cluster.Generic('JobStorageLocation', '/home/JOB_STORAGE_LOCATION');
set(cluster, 'HasSharedFilesystem', true);
set(cluster, 'PluginScriptsLocation', '<INSTALLATION_DIR>/parallel/gridengine/remote');
set(cluster, 'ClusterMatlabRoot', '/apps/matlab');
set(cluster, 'OperatingSystem', 'unix');
% Define the cluster host that will be used for job submission
cluster.AdditionalProperties.ClusterHost = 'myHost1';

2. Create a job and some tasks, submit the job, and wait for it to finish before
getting the results. Do the same for communicating jobs if required.

The first time you submit a job to the cluster from any client MATLAB session
you will be prompted to provide your username and other credential information for the
cluster host that will submit the job.  If you choose to use an identity file, this must
be an ssh identity file.

If you need to change your credentials, reset them using the following command
in the MATLAB command window:
    cluster.UserData.RemoteConnection.disconnect

You will be prompted to provide your credentials again when you next submit a job.

As an alternative to these steps, create a profile that defines the appropriate
properties and run profile validation to verify that the profile
works correctly.

2) Description of Files
=======================
For more detail about these files, refer to the help and comments contained in the files themselves.

MATLAB Functions Required for generic cluster
----------------------------------------------
independentSubmitFcn.m
    Submit function for independent jobs.  Used as the IndependentSubmitFcn for your generic cluster object.
communicatingSubmitFcn.m
    Submit function for communicating jobs.  Used as the CommunicatingSubmitFcn for your generic cluster object.
deleteJobFcn.m
    Delete a job on the cluster.  Used as the DeleteJobFcn for your generic cluster object.
getJobStateFcn.m
    Get the job state from the cluster.  Used as the GetJobStateFcn for your generic cluster object.

Other MATLAB Functions
-----------------------
extractJobId.m
    Get the cluster's job ID from the submission output.
getSubmitString.m
    Get the submission string for the cluster.
getCommonSubmitArgs.m
    Get additional arguments to append to the qsub command.
getSimplifiedSchedulerIDsForJob.m
    Returns the smallest possible list of Grid Engine job IDs that describe
    the MATLAB job.
createSubmitScript.m
    Create a script that is executed on the cluster host to perform job submission.
getRemoteConnection.m
    Get or create a parallel.cluster.RemoteClusterAccess connection.  If a new connection
    is created, this function prompts for user credentials either through standard
    MATLAB dialogs or the command line. It stores the connection in the UserData property of
    the cluster object.  If you provide incorrect credentials, you can reset them
    using the following code:
        >> cluster.UserData.RemoteConnection.disconnect();

    Refer to the MATLAB help for parallel.cluster.RemoteClusterAccess for more information.

Executable Scripts
-------------------
independentJobWrapper.sh
    Script used by the cluster to launch the MATLAB worker processes for independent jobs.
communicatingJobWrapper.sh
    Script used by the cluster to launch the MATLAB worker processes for communicating jobs.

3) Optional Customizations
==========================
The code customizations listed in this section are clearly marked in the relevant files.

getCommonSubmitArgs.m
---------------------
getCommonSubmitArgs provides the ability to supply additional submit arguments to the
qsub command.  You can specify these arguments in the cluster profile.  From
the Parallel menu, open the Cluster Profile Manager and go to the Scheduler Plugin
section of your cluster profile.  In AdditionalProperties, add or modify the
AdditionalSubmitArgs property to include additional submit arguments that are
appropriate to your cluster.  Alternatively, you can also modify the AdditionalProperties
property of the generic cluster object.  Within getCommonSubmitArgs.m, you can
provide support to custom AdditionalProperties fields that may then be added
to the cluster profile.  For more information about valid submission arguments,
refer to the qsub command documentation provided with your Grid Engine cluster.

independentSubmitFcn.m
----------------------
independentSubmitFcn provides the ability to supply additional submit arguments to the
qsub command.  For more information about valid submission arguments, refer
to the qsub command documentation provided with your Grid Engine cluster.

communicatingSubmitFcn.m
------------------------
communicatingSubmitFcn calculates the number of nodes to request from the cluster from the
NumWorkersRange property of the communicating job. NumWorkersRange is set based on the NumWorkers
property of the generic cluster object.  Customize the number of nodes requested
to suit your cluster's requirements.

communicatingSubmitFcn provides the ability to supply additional submit arguments to the
qsub command.  For more information about valid submission arguments, refer
to the qsub command documentation provided with your Grid Engine cluster.

communicatingJobWrapperSmpd.sh
--------------------------
communicatingJobWrapperSmpd.sh uses the StrictHostKeyChecking=no and UserKnownHostsFile=/dev/null options
for ssh.  Customize the ssh options to suit your cluster's requirements.
For more information, refer to your operating system's ssh documentation.

getRemoteConnection.m
---------------------
getRemoteConnection.m uses either standard MATLAB dialogs or command line input to request
credentials from users.  You may wish to provide default credentials or modify the manner
in which the credential information is requested.
